declare type StringMap<T = any> = { [key: string]: T };
declare type NumberMap<T = any> = { [key: number]: T };
declare type StringNumberMap<T = any> = { [key: string]: T, [key: number]: T };
declare type Undefinable<T> = T | undefined;
declare type Omit<T, P extends string | number | symbol> = Pick<T, Exclude<keyof T, P>>;
declare type PartialProperty<T, P extends keyof T> = Partial<Pick<T, P>>;
declare type TypeOf<T extends object, P extends keyof T> = T[P];
declare type PropertyOf<T extends object, P extends keyof T> = Property<P, Of<T>>;
declare type Property<P extends keyof T, T extends object> = { [P2 in keyof T[P]]: T[P][P2] };
declare type Of<T> = T;
